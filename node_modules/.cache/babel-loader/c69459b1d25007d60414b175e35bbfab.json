{"ast":null,"code":"import _slicedToArray from \"/Users/subhashbeniwal/Repos/subhash/sfedDashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/subhashbeniwal/Repos/subhash/sfedDashboard/src/views/Dashboard/surveys/kisanSurvey/viewSurvey.js\";\nimport React, { useEffect, useState } from \"react\";\nimport FirebaseDataService from \"../../../../services/firebase.service\";\nimport { auth } from \"../../../../services/firebase\";\nimport { Box, Divider, Typography } from \"@material-ui/core\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { useStyles } from \"../internSurvey/viewSurveyStyles\";\nimport { kisanSurveyAgentInfo, kisanSurveyAgriInputData, kisanSurveyConsumptionCommodity, kisanSurveyCropData, kisanSurveyCurrentCropData, kisanSurveyfarmerData } from \"./constants\";\nimport { surveyAgentInfo, surveyCropInfo } from \"../farmBookSurvey/constants\";\n\nfunction ViewKisanSurvey(props) {\n  var _this = this;\n\n  var classes = props.classes;\n  var main = classes.main,\n      container = classes.container,\n      dataBox = classes.dataBox,\n      labelBox = classes.labelBox,\n      inputBox = classes.inputBox,\n      divider = classes.divider,\n      containerTitle = classes.containerTitle;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      survey = _useState2[0],\n      setSurvey = _useState2[1];\n\n  var Allsurvey = [{\n    title: \"Farmer Details\",\n    survey: kisanSurveyfarmerData\n  }, {\n    title: \"Crop Details\",\n    survey: kisanSurveyCropData\n  }, {\n    title: \"Agri Input Details\",\n    survey: kisanSurveyAgriInputData\n  }, {\n    title: \"Consumption by commodity\",\n    survey: kisanSurveyConsumptionCommodity\n  }];\n  useEffect(function () {\n    checkIfLoggedIn();\n    getSurvey(props.match.params.id);\n  }, []);\n\n  var checkIfLoggedIn = function checkIfLoggedIn() {\n    auth.onAuthStateChanged(function (user) {\n      if (user) {// User is signed in.\n        // console.log(user);\n      } else {\n        // No user is signed in.\n        // console.log(\"logged out\");\n        props.history.push(\"/login\");\n      }\n    });\n  };\n\n  var deleteSurvey = function deleteSurvey(id) {\n    FirebaseDataService.deleteSurvey(id).then(function () {// console.log(\"Deleted survey successfully!\");\n    })[\"catch\"](function (e) {\n      console.log(e);\n    });\n  };\n\n  var getSurvey = function getSurvey(id) {\n    FirebaseDataService.getSurvey(id, 'kisan').then(function (data) {\n      // console.log(data.data());\n      setSurvey(data.data());\n    })[\"catch\"](function (e) {\n      console.log(e);\n    });\n  };\n\n  var _getDateTime = function _getDateTime(time) {\n    return time ? new Date(time).toDateString() + \" - \" + new Date(time).toLocaleTimeString() : 'N/A';\n  };\n\n  return /*#__PURE__*/React.createElement(Box, {\n    className: main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Agent Details\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, kisanSurveyAgentInfo.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      className: dataBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      className: labelBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, item.label)), /*#__PURE__*/React.createElement(Box, {\n      className: inputBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, survey ? item.dateType ? _getDateTime(survey[item.value]) : survey[item.value] : \"N/A\"));\n  })), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \"Farmer Details\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, kisanSurveyfarmerData.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      className: dataBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      className: labelBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, item.label)), /*#__PURE__*/React.createElement(Box, {\n      className: inputBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, (survey === null || survey === void 0 ? void 0 : survey.basic_info) && (survey === null || survey === void 0 ? void 0 : survey.basic_info[item.value]) ? survey === null || survey === void 0 ? void 0 : survey.basic_info[item.value] : \"N/A\"));\n  })), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, \"Crop Details (Rabi crop sow)\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, (survey === null || survey === void 0 ? void 0 : survey.rabi_season_info) && (survey === null || survey === void 0 ? void 0 : survey.rabi_season_info.map(function (crop, index) {\n    return kisanSurveyCropData.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(Box, {\n        key: index,\n        className: dataBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 36\n        }\n      }, item.value === \"commodity_sold_to\" ? survey === null || survey === void 0 ? void 0 : survey.rabi_season_info.map(function (item1, index) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(Box, {\n          className: labelBox,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 51\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"body1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 45\n          }\n        }, item.label)), /*#__PURE__*/React.createElement(Box, {\n          className: inputBox,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 45\n          }\n        }, item1[item.value] ? item1[item.value] : 'N/A'));\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n        className: labelBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 45\n        }\n      }, item.label)), /*#__PURE__*/React.createElement(Box, {\n        className: inputBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 41\n        }\n      }, crop[item.value] ? crop[item.value] : 'N/A')));\n    });\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, \"Crop Details (Kharif crop sow)\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, (survey === null || survey === void 0 ? void 0 : survey.kharif_season_info) && (survey === null || survey === void 0 ? void 0 : survey.kharif_season_info.map(function (crop, index) {\n    return kisanSurveyCropData.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(Box, {\n        key: index,\n        className: dataBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 36\n        }\n      }, item.value === \"commodity_sold_to\" ? survey === null || survey === void 0 ? void 0 : survey.kharif_season_info.map(function (item1, index) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(Box, {\n          className: labelBox,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 51\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"body1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 45\n          }\n        }, item.label)), /*#__PURE__*/React.createElement(Box, {\n          className: inputBox,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 45\n          }\n        }, item1[item.value] ? item1[item.value] : 'N/A'));\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n        className: labelBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 45\n        }\n      }, item.label)), /*#__PURE__*/React.createElement(Box, {\n        className: inputBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 41\n        }\n      }, crop[item.value] ? crop[item.value] : 'N/A')));\n    });\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, \"Crop Details (Current crop sown)\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, (survey === null || survey === void 0 ? void 0 : survey.current_crop_sown_rabi) && (survey === null || survey === void 0 ? void 0 : survey.current_crop_sown_rabi.map(function (crop, index) {\n    return kisanSurveyCurrentCropData.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(Box, {\n        key: index,\n        className: dataBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        className: labelBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 33\n        }\n      }, item.label)), /*#__PURE__*/React.createElement(Box, {\n        className: inputBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }, crop[item.value] ? crop[item.value] : \"N/A\"));\n    });\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }, \"Agri input Details\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, kisanSurveyAgriInputData.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      className: dataBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      className: labelBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 29\n      }\n    }, item.label)), /*#__PURE__*/React.createElement(Box, {\n      className: inputBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }\n    }, (survey === null || survey === void 0 ? void 0 : survey.agri_input_info) && (survey === null || survey === void 0 ? void 0 : survey.agri_input_info[item.value]) ? survey === null || survey === void 0 ? void 0 : survey.agri_input_info[item.value] : \"N/A\"));\n  })), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: containerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  }, \"Consumption by commodity Details\")), /*#__PURE__*/React.createElement(Box, {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, (survey === null || survey === void 0 ? void 0 : survey.input_consumption_by_commodity) && (survey === null || survey === void 0 ? void 0 : survey.input_consumption_by_commodity.map(function (crop, index) {\n    return kisanSurveyConsumptionCommodity.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(Box, {\n        key: index,\n        className: dataBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        className: labelBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 33\n        }\n      }, item.label)), /*#__PURE__*/React.createElement(Box, {\n        className: inputBox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 29\n        }\n      }, crop[item.value] ? crop[item.value] : \"N/A\"));\n    });\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    className: divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default withStyles(useStyles, {\n  withTheme: true\n})(ViewKisanSurvey);","map":{"version":3,"sources":["/Users/subhashbeniwal/Repos/subhash/sfedDashboard/src/views/Dashboard/surveys/kisanSurvey/viewSurvey.js"],"names":["React","useEffect","useState","FirebaseDataService","auth","Box","Divider","Typography","withStyles","useStyles","kisanSurveyAgentInfo","kisanSurveyAgriInputData","kisanSurveyConsumptionCommodity","kisanSurveyCropData","kisanSurveyCurrentCropData","kisanSurveyfarmerData","surveyAgentInfo","surveyCropInfo","ViewKisanSurvey","props","classes","main","container","dataBox","labelBox","inputBox","divider","containerTitle","survey","setSurvey","Allsurvey","title","checkIfLoggedIn","getSurvey","match","params","id","onAuthStateChanged","user","history","push","deleteSurvey","then","e","console","log","data","_getDateTime","time","Date","toDateString","toLocaleTimeString","map","item","index","label","dateType","value","basic_info","rabi_season_info","crop","item1","kharif_season_info","current_crop_sown_rabi","agri_input_info","input_consumption_by_commodity","withTheme"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport FirebaseDataService from \"../../../../services/firebase.service\";\nimport {auth} from \"../../../../services/firebase\";\nimport {Box, Divider, Typography} from \"@material-ui/core\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {useStyles} from \"../internSurvey/viewSurveyStyles\";\nimport {\n    kisanSurveyAgentInfo,\n    kisanSurveyAgriInputData,\n    kisanSurveyConsumptionCommodity,\n    kisanSurveyCropData, kisanSurveyCurrentCropData,\n    kisanSurveyfarmerData\n} from \"./constants\";\nimport {surveyAgentInfo, surveyCropInfo} from \"../farmBookSurvey/constants\";\n\n\nfunction ViewKisanSurvey(props) {\n    const {classes} = props;\n    const {main, container, dataBox, labelBox, inputBox, divider, containerTitle} = classes;\n    const [survey, setSurvey] = useState('')\n\n    const Allsurvey = [\n        {\n            title: \"Farmer Details\",\n            survey: kisanSurveyfarmerData,\n        },\n        {\n            title: \"Crop Details\",\n            survey: kisanSurveyCropData,\n        },\n        {\n            title: \"Agri Input Details\",\n            survey: kisanSurveyAgriInputData,\n        },\n        {\n            title: \"Consumption by commodity\",\n            survey: kisanSurveyConsumptionCommodity,\n        },\n    ]\n\n    useEffect(() => {\n        checkIfLoggedIn();\n        getSurvey(props.match.params.id)\n    }, [])\n\n    const checkIfLoggedIn = () => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                // User is signed in.\n                // console.log(user);\n            } else {\n                // No user is signed in.\n                // console.log(\"logged out\");\n                props.history.push(\"/login\")\n            }\n        });\n    }\n\n    const deleteSurvey = (id) => {\n        FirebaseDataService.deleteSurvey(id)\n            .then(() => {\n                // console.log(\"Deleted survey successfully!\");\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }\n\n    const getSurvey = (id) => {\n        FirebaseDataService.getSurvey(id, 'kisan')\n            .then((data) => {\n                // console.log(data.data());\n                setSurvey(data.data())\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }\n\n    const _getDateTime = (time) => {\n        return time ? (new Date(time).toDateString() + \" - \" + new Date(time).toLocaleTimeString()) : 'N/A'\n    }\n\n\n    return (\n        <Box className={main}>\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Agent Details\n                </Typography>\n            </Box>\n            <Box className={container}>\n                {kisanSurveyAgentInfo.map((item, index) => {\n                    return <Box key={index} className={dataBox}>\n                        <Box className={labelBox}>\n                            <Typography variant={\"body1\"}>\n                                {item.label}\n                            </Typography>\n                        </Box>\n                        <Box className={inputBox}>\n                            {survey ? (item.dateType ? _getDateTime(survey[item.value]) : survey[item.value]) : \"N/A\"}\n                        </Box>\n                    </Box>\n                })}\n            </Box>\n            <Divider className={divider}/>\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Farmer Details\n                </Typography>\n            </Box>\n            <Box className={container}>\n                {kisanSurveyfarmerData.map((item, index) => {\n                    return <Box key={index} className={dataBox}>\n                        <Box className={labelBox}>\n                            <Typography variant={\"body1\"}>\n                                {item.label}\n                            </Typography>\n                        </Box>\n                        <Box className={inputBox}>\n                            {survey?.basic_info && survey?.basic_info[item.value] ? survey?.basic_info[item.value] : \"N/A\"}\n                        </Box>\n                    </Box>\n                })}\n            </Box>\n            <Divider className={divider}/>\n\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Crop Details (Rabi crop sow)\n                </Typography>\n            </Box>\n            <Box className={container}>\n                {survey?.rabi_season_info && survey?.rabi_season_info.map((crop, index) => {\n                        return kisanSurveyCropData.map((item, index) => {\n                            return <Box key={index} className={dataBox}>\n                                {item.value === \"commodity_sold_to\" ?\n                                    survey?.rabi_season_info.map((item1, index) => {\n                                        return <> <Box className={labelBox}>\n                                            <Typography variant={\"body1\"}>\n                                                {item.label}\n                                            </Typography>\n                                        </Box>\n                                            <Box className={inputBox}>\n                                                {item1[item.value] ? item1[item.value] : 'N/A'}\n                                            </Box>\n                                        </>\n                                    }) : <>\n                                        <Box className={labelBox}>\n                                            <Typography variant={\"body1\"}>\n                                                {item.label}\n                                            </Typography>\n                                        </Box>\n                                        <Box className={inputBox}>\n                                            {crop[item.value] ? crop[item.value] : 'N/A'}\n                                        </Box>\n                                    </>}\n                            </Box>\n                        })\n                    }\n                )}\n            </Box>\n            <Divider className={divider}/>\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Crop Details (Kharif crop sow)\n                </Typography>\n            </Box>\n\n            <Box className={container}>\n                {survey?.kharif_season_info && survey?.kharif_season_info.map((crop, index) => {\n                        return kisanSurveyCropData.map((item, index) => {\n                            return <Box key={index} className={dataBox}>\n                                {item.value === \"commodity_sold_to\" ?\n                                    survey?.kharif_season_info.map((item1, index) => {\n                                        return <> <Box className={labelBox}>\n                                            <Typography variant={\"body1\"}>\n                                                {item.label}\n                                            </Typography>\n                                        </Box>\n                                            <Box className={inputBox}>\n                                                {item1[item.value] ? item1[item.value] : 'N/A'}\n                                            </Box>\n                                        </>\n                                    }) : <>\n                                        <Box className={labelBox}>\n                                            <Typography variant={\"body1\"}>\n                                                {item.label}\n                                            </Typography>\n                                        </Box>\n                                        <Box className={inputBox}>\n                                            {crop[item.value] ? crop[item.value] : 'N/A'}\n                                        </Box>\n                                    </>}\n                            </Box>\n                        })\n                    }\n                )}\n            </Box>\n            <Divider className={divider}/>\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Crop Details (Current crop sown)\n                </Typography>\n            </Box>\n\n            <Box className={container}>\n                {survey?.current_crop_sown_rabi && survey?.current_crop_sown_rabi.map((crop, index) => {\n                    return kisanSurveyCurrentCropData.map((item, index) => {\n                        return <Box key={index} className={dataBox}>\n                            <Box className={labelBox}>\n                                <Typography variant={\"body1\"}>\n                                    {item.label}\n                                </Typography>\n                            </Box>\n                            <Box className={inputBox}>\n                                {crop[item.value] ? crop[item.value] : \"N/A\"}\n                            </Box>\n                        </Box>\n                    })\n                })}\n            </Box>\n            <Divider className={divider}/>\n\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Agri input Details\n                </Typography>\n            </Box>\n            <Box className={container}>\n                {kisanSurveyAgriInputData.map((item, index) => {\n                    return <Box key={index} className={dataBox}>\n                        <Box className={labelBox}>\n                            <Typography variant={\"body1\"}>\n                                {item.label}\n                            </Typography>\n                        </Box>\n                        <Box className={inputBox}>\n                            {survey?.agri_input_info && survey?.agri_input_info[item.value] ? survey?.agri_input_info[item.value] : \"N/A\"}\n                        </Box>\n                    </Box>\n                })}\n            </Box>\n            <Divider className={divider}/>\n\n            <Box className={containerTitle}>\n                <Typography variant={\"h5\"}>\n                    Consumption by commodity Details\n                </Typography>\n            </Box>\n            <Box className={container}>\n                {survey?.input_consumption_by_commodity && survey?.input_consumption_by_commodity.map((crop, index) => {\n                    return kisanSurveyConsumptionCommodity.map((item, index) => {\n                        return <Box key={index} className={dataBox}>\n                            <Box className={labelBox}>\n                                <Typography variant={\"body1\"}>\n                                    {item.label}\n                                </Typography>\n                            </Box>\n                            <Box className={inputBox}>\n                                {crop[item.value] ? crop[item.value] : \"N/A\"}\n                            </Box>\n                        </Box>\n                    })\n                })}\n            </Box>\n            <Divider className={divider}/>\n        </Box>\n    );\n}\n\nexport default withStyles(useStyles, {withTheme: true})(ViewKisanSurvey);"]},"metadata":{},"sourceType":"module"}